<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.renee328.mapper.AdminMapper">
    <resultMap id="adminResultMap" type="com.renee328.dto.AdminDto">
        <id property="userId" column="USER_ID" />
        <result property="roleId" column="ROLE_ID" />
        <result property="roleName" column="ROLE_NAME" />
        <result property="createdAt" column="CREATED_AT" />
        <result property="createdBy" column="CREATED_BY" />
        <result property="updatedAt" column="UPDATED_AT" />
        <result property="updatedBy" column="UPDATED_BY" />
        <result property="isInitialized" column="IS_INITIALIZED" javaType="boolean" typeHandler="com.renee328.handler.BooleanToYNTypeHandler"/>
        <result property="isActive" column="IS_ACTIVE" javaType="boolean" typeHandler="com.renee328.handler.BooleanToYNTypeHandler"/>
        <result property="loginToken" column="LOGIN_TOKEN" />
        <result property="loginPassword" column="LOGIN_PASSWORD" />
        <result property="loginId" column="LOGIN_ID" />
    </resultMap>

    <!-- 로그인 아이디 중복 확인 -->
    <select id="countByLoginId" parameterType="String" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM admin WHERE LOGIN_ID = #{loginId}
    </select>

    <select id="findByLoginId" parameterType="String" resultMap="adminResultMap">
        SELECT * FROM admin WHERE LOGIN_ID = #{loginId}
    </select>

    <select id="findByUserId" parameterType="java.lang.Long" resultMap="adminResultMap">
        SELECT * FROM admin WHERE USER_ID = #{userId}
    </select>

    <!-- 관리자 권한 등급 조회 -->
    <select id="getRolePriority" parameterType="string" resultType="java.lang.Integer">
        SELECT PRIORITY FROM role WHERE ROLE_ID = #{roleId}
    </select>

    <!-- 관리자 등록하기 -->
    <insert id="insertAdmin" parameterType="com.renee328.dto.AdminDto">
        INSERT INTO admin
        (
            ROLE_ID,
            CREATED_AT,
            CREATED_BY,
            UPDATED_AT,
            UPDATED_BY,
            IS_INITIALIZED,
            IS_ACTIVE,
            LOGIN_PASSWORD,
            LOGIN_ID
        )
        VALUES
            (
                #{roleId},
                NOW(),
                #{createdBy},
                NOW(),
                #{updatedBy},
                #{isInitialized, jdbcType=VARCHAR},
                #{isActive, jdbcType=VARCHAR},
                #{loginPassword},
                #{loginId}
            )
    </insert>

    <!-- 관리자 목록 조회 -->
    <select id="getAdminList" resultMap="adminResultMap">
        SELECT a.*, r.ROLE_NAME FROM admin a
        LEFT JOIN role r ON a.ROLE_ID = r.ROLE_ID
        ORDER BY a.USER_ID ASC
    </select>

    <!-- 관리자 수 조회 -->
    <select id="getAdminCount" resultType="int">
        SELECT COUNT(*)
        FROM admin
    </select>

    <!-- 관리자 정보 수정하기 -->
    <update id="updateAdmin" parameterType="map">
        UPDATE admin
        SET ROLE_ID = #{adminDto.roleId},
            IS_ACTIVE = #{adminDto.isActive, jdbcType=VARCHAR},
            UPDATED_AT = NOW(),
            UPDATED_BY = #{adminDto.updatedBy}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 관리자 개인 비밀번호 변경하기 -->
    <update id="updateMyPassword" parameterType="map">
        UPDATE admin
        SET LOGIN_PASSWORD = #{adminDto.loginPassword},
            UPDATED_AT = NOW(),
            UPDATED_BY = #{adminDto.updatedBy}
        WHERE USER_ID = #{userId}
    </update>

    <delete id="deleteAdmin" parameterType="java.lang.Long">
        DELETE FROM admin WHERE USER_ID = #{userId}
    </delete>

    <insert id="logAdminDeletion" parameterType="map">
        INSERT INTO admin_action_logs (ADMIN_ID, ACTION, TARGET, TIMESTAMP)
        VALUES (#{deleterId}, '관리자 계정 삭제', #{deletedId}, NOW())
    </insert>
</mapper>